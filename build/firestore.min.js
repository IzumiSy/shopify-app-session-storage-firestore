"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.FirestoreSessionStorage=void 0;const shopify_api_1=require("@shopify/shopify-api"),app_1=require("firebase/app"),firestore_1=require("firebase/firestore");class FirestoreSessionStorage{tableName;firestore;converter;constructor(e,t="__sessions"){this.tableName=t;const r=(0,app_1.initializeApp)(e);this.firestore=(0,firestore_1.getFirestore)(r),this.converter={toFirestore:e=>e,fromFirestore:(e,t)=>e.data(t)}}async storeSession(e){try{return await(0,firestore_1.setDoc)((0,firestore_1.doc)(this.firestore,this.tableName,e.id).withConverter(this.converter),{shopID:e.shop,value:e.toObject()}),!0}catch{return!1}}async loadSession(e){const t=await(0,firestore_1.getDoc)((0,firestore_1.doc)(this.firestore,this.tableName,e).withConverter(this.converter));if(t.exists()){const e=t.data();return new shopify_api_1.Session(e.value)}}async deleteSession(e){try{return await(0,firestore_1.deleteDoc)((0,firestore_1.doc)(this.firestore,this.tableName,e)),!0}catch{return!1}}async deleteSessions(e){try{const t=(0,firestore_1.writeBatch)(this.firestore);return e.forEach((e=>{t.delete((0,firestore_1.doc)(this.firestore,this.tableName,e))})),await t.commit(),!0}catch{return!1}}async findSessionsByShop(e){const t=(0,firestore_1.collection)(this.firestore,this.tableName).withConverter(this.converter),r=(0,firestore_1.query)(t,(0,firestore_1.where)("shopID","==",e));return(await(0,firestore_1.getDocs)(r)).docs.map((e=>{const t=e.data();return new shopify_api_1.Session(t.value)}))}useEmulator(){(0,firestore_1.connectFirestoreEmulator)(this.firestore,"localhost",8080)}}exports.FirestoreSessionStorage=FirestoreSessionStorage;
